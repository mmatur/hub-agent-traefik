// Code generated by mocktail; DO NOT EDIT.

package version

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
)

// clusterServiceMock mock of clusterService.
type clusterServiceMock struct{ mock.Mock }

// newClusterServiceMock creates a new clusterServiceMock.
func newClusterServiceMock(tb testing.TB) *clusterServiceMock {
	tb.Helper()

	m := &clusterServiceMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *clusterServiceMock) SetVersionStatus(_ context.Context, state Status) error {
	_ret := _m.Called(state)

	if _rf, ok := _ret.Get(0).(func(Status) error); ok {
		return _rf(state)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *clusterServiceMock) OnSetVersionStatus(state Status) *clusterServiceSetVersionStatusCall {
	return &clusterServiceSetVersionStatusCall{Call: _m.Mock.On("SetVersionStatus", state), Parent: _m}
}

func (_m *clusterServiceMock) OnSetVersionStatusRaw(state interface{}) *clusterServiceSetVersionStatusCall {
	return &clusterServiceSetVersionStatusCall{Call: _m.Mock.On("SetVersionStatus", state), Parent: _m}
}

type clusterServiceSetVersionStatusCall struct {
	*mock.Call
	Parent *clusterServiceMock
}

func (_c *clusterServiceSetVersionStatusCall) Panic(msg string) *clusterServiceSetVersionStatusCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *clusterServiceSetVersionStatusCall) Once() *clusterServiceSetVersionStatusCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *clusterServiceSetVersionStatusCall) Twice() *clusterServiceSetVersionStatusCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *clusterServiceSetVersionStatusCall) Times(i int) *clusterServiceSetVersionStatusCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *clusterServiceSetVersionStatusCall) WaitUntil(w <-chan time.Time) *clusterServiceSetVersionStatusCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *clusterServiceSetVersionStatusCall) After(d time.Duration) *clusterServiceSetVersionStatusCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *clusterServiceSetVersionStatusCall) Run(fn func(args mock.Arguments)) *clusterServiceSetVersionStatusCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *clusterServiceSetVersionStatusCall) Maybe() *clusterServiceSetVersionStatusCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *clusterServiceSetVersionStatusCall) TypedReturns(a error) *clusterServiceSetVersionStatusCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *clusterServiceSetVersionStatusCall) ReturnsFn(fn func(Status) error) *clusterServiceSetVersionStatusCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *clusterServiceSetVersionStatusCall) TypedRun(fn func(Status)) *clusterServiceSetVersionStatusCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_state, _ := args.Get(0).(Status)
		fn(_state)
	})
	return _c
}

func (_c *clusterServiceSetVersionStatusCall) OnSetVersionStatus(state Status) *clusterServiceSetVersionStatusCall {
	return _c.Parent.OnSetVersionStatus(state)
}

func (_c *clusterServiceSetVersionStatusCall) OnSetVersionStatusRaw(state interface{}) *clusterServiceSetVersionStatusCall {
	return _c.Parent.OnSetVersionStatusRaw(state)
}
